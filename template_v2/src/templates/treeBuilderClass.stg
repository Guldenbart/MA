class(dslName, packageName, firstInterfaceName, interfaceNames, scopesList) ::= <<
package <packageName>;

import java.util.ArrayList;

import parseTree.ParseTree;
import parseTree.ScopeNode;
import parseTree.AMethodNode;
import <dslName>.<firstInterfaceName>;
<interfaceNames:{iName | import <dslName>.<toUC(iName)>;<\n>}>
<! scopesList:{scopeObject | <getImports(scopeObject.methods, scopeObject.simpleMethods, scopeObject.nestedMethods, packageName)>} !>

public final class <toUC(dslName)>TreeBuilder {
	private ParseTree parseTree;
	<interfaceNames:{iName | private final <toUC(iName)>Scope <toLC(iName)>Scope;<\n>}>
	private ArrayList\<ScopeNode> scopeNodeList;
	
	private <toUC(dslName)>TreeBuilder() {
		<interfaceNames:{iName | this.<toLC(iName)>Scope = this.new <toUC(iName)>Scope();<\n>}>
		this.scopeNodeList = new ArrayList\<ScopeNode>();
	}
	
	public static <firstInterfaceName>Scope begin() {
		return new <toUC(dslName)>TreeBuilder().new <firstInterfaceName>Scope();
	}
	
	<scopesList:{scopeObject | <scope(dslName, scopeObject.interfaceName, scopeObject.allMethods)>}>
	
}
>>


getImports(methods, simpleMethods, nestedMethods, packageName) ::= <<
<methods:{method | import MethodNode<toUC(method.name)>;<\n>}>
<simpleMethods:{simpleMethod | import SimpleMethodNode<toUC(simpleMethod.name)>;<\n>}>
<nestedMethods:{nestedMethod | import NestedMethodNode<toUC(nestedMethod.name)>;<\n>}>
>>


scope(dslName, interfaceName, methodList) ::= <<
public final class <interfaceName>Scope implements <interfaceName> {

	private ArrayList\<AMethodNode> methodList<interfaceName>;
	
	private <interfaceName>Scope() {
		methodList<interfaceName> = new ArrayList\<AMethodNode>();
	}
	
	<methodList: {mObj | <method(dslName, interfaceName, mObj.name, mObj.returnType, mObj.argumentType, mObj.argumentName, mObj.hasArgument, mObj.scopeEnds, mObj.treeEnds)>}>
}

>>


method(dslName, iName, mName, returnType, argType, argName, hasArgument, scopeEnds, treeEnds) ::= <<
@Override
public <getReturnType(toUC(returnType))> <toLC(mName)>(<getSignature(argType, argName, hasArgument)>) {
	AMethodNode m = new <if(hasArgument)><methodTypeMap.(argType)><endif>MethodNode<toUC(mName)>(<argName>);
	methodList<toUC(iName)>.add(m);
	
	<if(scopeEnds)>
	// new ScopeNode
	ScopeNode scopeNode<toUC(iName)> = new ScopeNode<toUC(iName)>(methodList<toUC(iName)>);
	<toUC(dslName)>TreeBuilder.this.scopeNodeList.add(scopeNode<toUC(iName)>);
	
	<endif>
	<if(treeEnds)>
	// new ParseTree
	parseTree = new ParseTree(scopeNodeList);
	
	<endif>
	return <getReturnLine(scopeEnds, treeEnds, toLC(iName), toUC(dslName))>;	
}


>>

getReturnType(returnTypeUC) ::= "<returnTypeUC><if(scopeEnds&&!treeEnds)>Scope<endif>"

getSignature(argType, argName, hasArgument) ::= "<if(hasArgument)>final <getArgType(argType)> <argName><endif>"

getArgType(argType) ::= "<argType>"

getReturnLine(scopeEnds, treeEnds, iNameLC, dslNameUC) ::= <<
<if(scopeEnds)><dslNameUC>TreeBuilder.<endif>this<if(treeEnds)>.parseTree<elseif(scopeEnds)>.<toLC(returnType)>Scope<endif>
>>

methodTypeMap ::= [
	"ParseTree":"Nested",
	default:"Simple"
]

toUC(str) ::= <<
<str; format="cap">
>>

toLC(str) ::= <<
<str; format="lower">
>>

