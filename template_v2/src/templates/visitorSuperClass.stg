visitorSuperClass(dslName, package, parseTreePackage, scopesList) ::= <<
package <package>;

import visitor.AVisitor;

<scopesList:{scope | <getImports(scope.interfaceName, scope.methods, scope.simpleMethods, scope.nestedMethods)>}>
public abstract class A<toUC(dslName)>Visitor extends AVisitor {
	<scopesList:{scope | <getBody(scope.interfaceName, scope.methods, scope.simpleMethods, scope.nestedMethods)>}>
}

>>


getImports(interfaceName, methods, simpleMethods, nestedMethods) ::= <<
import parseTreeGen.Lope<interfaceName>; <\n>
<methods:{method | import parseTreeGen.Method<toUC(method.name)>;<\n>}>
<simpleMethods:{method | import parseTreeGen.SimpleMethod<toUC(method.name)>;<\n>}>
<nestedMethods:{method | import parseTreeGen.NestedMethod<toUC(method.name)>;<\n>}>
>>


getBody(interfaceName, methods, simpleMethods, nestedMethods) ::= <<
	public void visit(Lope<interfaceName> lope<interfaceName>) {\}<\n>
	

	<methods:{method | public void visit(Method<toUC(method.name)> method<toUC(method.name)>) {\}<\n>}>
	
	<simpleMethods:{method | public void visit(SimpleMethod<toUC(method.name)> simpleMethod<toUC(method.name)>) {\}<\n>}>
	
	<nestedMethods:{method | public void visit(NestedMethod<toUC(method.name)> nestedMethod<toUC(method.name)>) {\}<\n>}>
>>


toUC(str) ::= <<
<str; format="cap">
>>