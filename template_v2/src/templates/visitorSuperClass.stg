visitorSuperClass(dslName, package, parseTreePackage, scopesList) ::= <<
package <package>;

import visitor.AVisitor;

<scopesList:{scope | <getImports(parseTreePackage, scope.scopeName, scope.methods, scope.simpleMethods, scope.nestedMethods)>}>
public abstract class A<toUC(dslName)>Visitor extends AVisitor {
	<scopesList:{scope | <getBody(scope.scopeName, scope.methods, scope.simpleMethods, scope.nestedMethods)>}>
}

>>


getImports(parseTreePackage, scopeName, methods, simpleMethods, nestedMethods) ::= <<
import <parseTreePackage>.ScopeNode<scopeName>; <\n>
<methods:{method | import <parseTreePackage>.MethodNode<toUC(method.name)>;<\n>}>
<simpleMethods:{method | import <parseTreePackage>.SimpleMethodNode<toUC(method.name)>;<\n>}>
<nestedMethods:{method | import <parseTreePackage>.NestedMethodNode<toUC(method.name)>;<\n>}>
>>


getBody(scopeName, methods, simpleMethods, nestedMethods) ::= <<
	public void visit(final ScopeNode<scopeName> scopeNode<scopeName>) { \}<\n>
	<methods:{method | public void visit(final MethodNode<toUC(method.name)> methodNode<toUC(method.name)>) { \}<\n>}>
	<simpleMethods:{method | public void visit(final SimpleMethodNode<toUC(method.name)> simpleMethodNode<toUC(method.name)>) { \}<\n>}>
	<nestedMethods:{method | public void visit(final NestedMethodNode<toUC(method.name)> nestedMethodNode<toUC(method.name)>) { \}<\n>}>
>>


toUC(str) ::= <<
<str; format="cap">
>>